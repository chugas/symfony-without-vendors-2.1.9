<?php

namespace Application\Success\UsuarioBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * @ORM\Entity(repositoryClass="Application\Success\UsuarioBundle\Entity\Repository\ProductRepository")
 * @ORM\InheritanceType("SINGLE_TABLE")
 * @ORM\DiscriminatorColumn(name="type", type="string")
 * @ORM\DiscriminatorMap({"product" = "Product", "service" = "Service"})
 */
class Product {

  /**
   * @var integer
   *
   * @ORM\Column(name="id", type="integer")
   * @ORM\Id
   * @ORM\GeneratedValue(strategy="AUTO")
   */
  protected $id;

  /**
   * @ORM\Column(name="title", type="string", length=64, nullable=false)
   * @Assert\NotBlank(message = "Por favor, debes escribir el titulo")
   */
  protected $title;

  /**
   * @ORM\Column(name="abstract", type="string", length=512, nullable=false)
   * @Assert\NotBlank(message = "Por favor, debes escribir el abstract")
   * 
   * @var string
   */
  protected $abstract;

  /**
   * @ORM\Column(name="description", type="text", length=32, nullable=false)
   * @Assert\NotBlank(message = "Por favor, debes escribir la descripcion")
   * 
   * @var string
   */
  protected $description;

  /**
   * @ORM\Column(name="price", type="decimal", scale=2, nullable=false)
   * @Assert\Min(0)
   * 
   * @var decimal
   */
  protected $price;

  /**
   * @var string $image
   *
   * @ORM\Column(name="image", type="string", length=255, nullable=true)
   */
  protected $image;

  /**
   * @Assert\Image(maxSize="5242880")
   */
  protected $file;
  
  // Ver el cascade ???
  /**
   * @var Company
   * 
   * @ORM\ManyToOne(targetEntity="Company", cascade={"all"})
   */
  protected $company;
  
  /**
   * @var type 
   * 
   * @ORM\Column(name="pay_method", type="string", length=32, nullable=true)
   */
  protected $pay_method;
  
  /**
   *
   * @var type 
   * 
   * @ORM\Column(name="shipping_method", type="string", length=32, nullable=true)
   */
  protected $shipping_method;

  /**
   * Construct a new user
   */
  public function __construct() {
    parent::__construct();
  }

  public function __toString() {
    return (string) $this->getTitle();
  }

  /**
   * Get id
   *
   * @return int
   */
  public function getId() {
    return $this->id;
  }

  /**
   * Set id
   *
   * @param int $id
   */
  public function setId($id) {
    $this->id = $id;
  }

  /**
   * Set Title
   *
   * @param string $title
   * @return User
   */
  public function setTitle($title) {
    $this->title = $title;

    return $this;
  }

  /**
   * Get Title
   *
   * @return string 
   */
  public function getTitle() {
    return $this->title;
  }

  /**
   * Set abstract
   *
   * @param string $abstract
   * @return Product
   */
  public function setAbstract($abstract) {
    $this->abstract = $abstract;

    return $this;
  }

  /**
   * Get abstract
   *
   * @return string 
   */
  public function getAbstract() {
    return $this->abstract;
  }

  /**
   * Set description
   *
   * @param string $description
   * @return Product
   */
  public function setDescription($description) {
    $this->description = $description;

    return $this;
  }

  /**
   * Get description
   *
   * @return string 
   */
  public function getDescription() {
    return $this->description;
  }

  /**
   * Set price
   *
   * @param float $price
   * @return Product
   */
  public function setPrice($price) {
    $this->price = $price;

    return $this;
  }

  /**
   * Get price
   *
   * @return float 
   */
  public function getPrice() {
    return $this->price;
  }

  /**
   * Set image
   *
   * @param string $image
   * @return Product
   */
  public function setImage($image) {
    $this->image = $image;

    return $this;
  }

  /**
   * Get image
   *
   * @return string 
   */
  public function getImage() {
    return $this->image;
  }

  /**
   * Set company
   *
   * @param \Application\Success\UsuarioBundle\Entity\Company $company
   * @return Product
   */
  public function setCompany(\Application\Success\UsuarioBundle\Entity\Company $company = null) {
    $this->company = $company;

    return $this;
  }

  /**
   * Get company
   *
   * @return \Application\Success\UsuarioBundle\Entity\Company 
   */
  public function getCompany() {
    return $this->company;
  }

  /**
   * Set file
   *
   * @param string $file
   */
  public function setFile($file) {
    if (!empty($file)) {
      $this->image = 'changed';
    }
    $this->file = $file;
    return $this;
  }

  /**
   * Get file
   *
   * @return string
   */
  public function getFile() {
    return $this->file;
  }

  public function getAbsolutePath() {
    return null === $this->image ? null : $this->getUploadRootDir() . '/' . $this->image;
  }

  public function getWebPath() {
    return null === $this->image ? null : '/' . $this->getUploadDir() . '/' . $this->image;
  }

  public function getUploadRootDir() {
    return __DIR__ . '/../../../../../../web/' . $this->getUploadDir();
  }

  protected function getUploadDir() {
    // get rid of the __DIR__ so it doesn't screw when displaying uploaded doc/image in the view.
    //concatenar . $this->getCompany()->getId()
    return 'uploads/products';
  }

  /**
   * @ORM\PrePersist()
   * @ORM\PreUpdate()
   */
  public function preUpload() {
    if (null !== $this->file) {
      // do whatever you want to generate a unique name
      $this->image = uniqid() . '.' . $this->file->guessExtension();
    }
  }

  /**
   * @ORM\PostPersist()
   * @ORM\PostUpdate()
   */
  public function upload() {
    if (null === $this->file) {
      return;
    }

    // you must throw an exception here if the file cannot be moved
    // so that the entity is not persisted to the database
    // which the UploadedFile move() method does automatically
    $this->file->move($this->getUploadRootDir(), $this->image);

    unset($this->file);
  }

  /**
   * @ORM\PostRemove()
   */
  public function removeUpload() {
    if (!$file = $this->getAbsolutePath()) {
      return;
    }
    if (is_file($file)) {
      unlink($file);
    }
  }

}